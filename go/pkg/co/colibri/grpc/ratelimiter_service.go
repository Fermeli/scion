// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/colibri/v1/ratelimiter.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	colibri "github.com/scionproto/scion/go/pkg/proto/colibri"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RateLimiterServiceClient is the client API for RateLimiterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RateLimiterServiceClient interface {
	AddRateLimit(ctx context.Context, in *colibri.AddRateLimitRequest, opts ...grpc.CallOption) (*colibri.Success, error)
	SetBurstSizeAndRate(ctx context.Context, in *colibri.SetBurstSizeAndRateRequest, opts ...grpc.CallOption) (*colibri.Success, error)
	GetBurstSizeAndRate(ctx context.Context, in *colibri.GetterForIdentifierRequest, opts ...grpc.CallOption) (*colibri.GetBurstSizeAndRateResponse, error)
	GetBurstSize(ctx context.Context, in *colibri.GetterForIdentifierRequest, opts ...grpc.CallOption) (*colibri.GetBurstSizeResponse, error)
	SetBurstSize(ctx context.Context, in *colibri.SetBurstSizeRequest, opts ...grpc.CallOption) (*colibri.Success, error)
	GetRate(ctx context.Context, in *colibri.GetterForIdentifierRequest, opts ...grpc.CallOption) (*colibri.GetRateResponse, error)
	SetRate(ctx context.Context, in *colibri.SetRateRequest, opts ...grpc.CallOption) (*colibri.Success, error)
}

type rateLimiterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRateLimiterServiceClient(cc grpc.ClientConnInterface) RateLimiterServiceClient {
	return &rateLimiterServiceClient{cc}
}

func (c *rateLimiterServiceClient) AddRateLimit(ctx context.Context, in *colibri.AddRateLimitRequest, opts ...grpc.CallOption) (*colibri.Success, error) {
	out := new(colibri.Success)
	err := c.cc.Invoke(ctx, "/proto.colibri.v1.RateLimiterService/AddRateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimiterServiceClient) SetBurstSizeAndRate(ctx context.Context, in *colibri.SetBurstSizeAndRateRequest, opts ...grpc.CallOption) (*colibri.Success, error) {
	out := new(colibri.Success)
	err := c.cc.Invoke(ctx, "/proto.colibri.v1.RateLimiterService/SetBurstSizeAndRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimiterServiceClient) GetBurstSizeAndRate(ctx context.Context, in *colibri.GetterForIdentifierRequest, opts ...grpc.CallOption) (*colibri.GetBurstSizeAndRateResponse, error) {
	out := new(colibri.GetBurstSizeAndRateResponse)
	err := c.cc.Invoke(ctx, "/proto.colibri.v1.RateLimiterService/GetBurstSizeAndRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimiterServiceClient) GetBurstSize(ctx context.Context, in *colibri.GetterForIdentifierRequest, opts ...grpc.CallOption) (*colibri.GetBurstSizeResponse, error) {
	out := new(colibri.GetBurstSizeResponse)
	err := c.cc.Invoke(ctx, "/proto.colibri.v1.RateLimiterService/GetBurstSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimiterServiceClient) SetBurstSize(ctx context.Context, in *colibri.SetBurstSizeRequest, opts ...grpc.CallOption) (*colibri.Success, error) {
	out := new(colibri.Success)
	err := c.cc.Invoke(ctx, "/proto.colibri.v1.RateLimiterService/SetBurstSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimiterServiceClient) GetRate(ctx context.Context, in *colibri.GetterForIdentifierRequest, opts ...grpc.CallOption) (*colibri.GetRateResponse, error) {
	out := new(colibri.GetRateResponse)
	err := c.cc.Invoke(ctx, "/proto.colibri.v1.RateLimiterService/GetRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimiterServiceClient) SetRate(ctx context.Context, in *colibri.SetRateRequest, opts ...grpc.CallOption) (*colibri.Success, error) {
	out := new(colibri.Success)
	err := c.cc.Invoke(ctx, "/proto.colibri.v1.RateLimiterService/SetRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RateLimiterServiceServer is the server API for RateLimiterService service.
// All implementations must embed UnimplementedRateLimiterServiceServer
// for forward compatibility
type RateLimiterServiceServer interface {
	AddRateLimit(context.Context, *colibri.AddRateLimitRequest) (*colibri.Success, error)
	SetBurstSizeAndRate(context.Context, *colibri.SetBurstSizeAndRateRequest) (*colibri.Success, error)
	GetBurstSizeAndRate(context.Context, *colibri.GetterForIdentifierRequest) (*colibri.GetBurstSizeAndRateResponse, error)
	GetBurstSize(context.Context, *colibri.GetterForIdentifierRequest) (*colibri.GetBurstSizeResponse, error)
	SetBurstSize(context.Context, *colibri.SetBurstSizeRequest) (*colibri.Success, error)
	GetRate(context.Context, *colibri.GetterForIdentifierRequest) (*colibri.GetRateResponse, error)
	SetRate(context.Context, *colibri.SetRateRequest) (*colibri.Success, error)
	mustEmbedUnimplementedRateLimiterServiceServer()
}

// UnimplementedRateLimiterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRateLimiterServiceServer struct {
}

func (UnimplementedRateLimiterServiceServer) AddRateLimit(context.Context, *colibri.AddRateLimitRequest) (*colibri.Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRateLimit not implemented")
}
func (UnimplementedRateLimiterServiceServer) SetBurstSizeAndRate(context.Context, *colibri.SetBurstSizeAndRateRequest) (*colibri.Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBurstSizeAndRate not implemented")
}
func (UnimplementedRateLimiterServiceServer) GetBurstSizeAndRate(context.Context, *colibri.GetterForIdentifierRequest) (*colibri.GetBurstSizeAndRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBurstSizeAndRate not implemented")
}
func (UnimplementedRateLimiterServiceServer) GetBurstSize(context.Context, *colibri.GetterForIdentifierRequest) (*colibri.GetBurstSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBurstSize not implemented")
}
func (UnimplementedRateLimiterServiceServer) SetBurstSize(context.Context, *colibri.SetBurstSizeRequest) (*colibri.Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBurstSize not implemented")
}
func (UnimplementedRateLimiterServiceServer) GetRate(context.Context, *colibri.GetterForIdentifierRequest) (*colibri.GetRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRate not implemented")
}
func (UnimplementedRateLimiterServiceServer) SetRate(context.Context, *colibri.SetRateRequest) (*colibri.Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRate not implemented")
}
func (UnimplementedRateLimiterServiceServer) mustEmbedUnimplementedRateLimiterServiceServer() {}

// UnsafeRateLimiterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RateLimiterServiceServer will
// result in compilation errors.
type UnsafeRateLimiterServiceServer interface {
	mustEmbedUnimplementedRateLimiterServiceServer()
}

func RegisterRateLimiterServiceServer(s grpc.ServiceRegistrar, srv RateLimiterServiceServer) {
	s.RegisterService(&RateLimiterService_ServiceDesc, srv)
}

func _RateLimiterService_AddRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(colibri.AddRateLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServiceServer).AddRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.colibri.v1.RateLimiterService/AddRateLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServiceServer).AddRateLimit(ctx, req.(*colibri.AddRateLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimiterService_SetBurstSizeAndRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(colibri.SetBurstSizeAndRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServiceServer).SetBurstSizeAndRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.colibri.v1.RateLimiterService/SetBurstSizeAndRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServiceServer).SetBurstSizeAndRate(ctx, req.(*colibri.SetBurstSizeAndRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimiterService_GetBurstSizeAndRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(colibri.GetterForIdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServiceServer).GetBurstSizeAndRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.colibri.v1.RateLimiterService/GetBurstSizeAndRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServiceServer).GetBurstSizeAndRate(ctx, req.(*colibri.GetterForIdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimiterService_GetBurstSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(colibri.GetterForIdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServiceServer).GetBurstSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.colibri.v1.RateLimiterService/GetBurstSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServiceServer).GetBurstSize(ctx, req.(*colibri.GetterForIdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimiterService_SetBurstSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(colibri.SetBurstSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServiceServer).SetBurstSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.colibri.v1.RateLimiterService/SetBurstSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServiceServer).SetBurstSize(ctx, req.(*colibri.SetBurstSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimiterService_GetRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(colibri.GetterForIdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServiceServer).GetRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.colibri.v1.RateLimiterService/GetRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServiceServer).GetRate(ctx, req.(*colibri.GetterForIdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimiterService_SetRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(colibri.SetRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServiceServer).SetRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.colibri.v1.RateLimiterService/SetRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServiceServer).SetRate(ctx, req.(*colibri.SetRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RateLimiterService_ServiceDesc is the grpc.ServiceDesc for RateLimiterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RateLimiterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.colibri.v1.RateLimiterService",
	HandlerType: (*RateLimiterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRateLimit",
			Handler:    _RateLimiterService_AddRateLimit_Handler,
		},
		{
			MethodName: "SetBurstSizeAndRate",
			Handler:    _RateLimiterService_SetBurstSizeAndRate_Handler,
		},
		{
			MethodName: "GetBurstSizeAndRate",
			Handler:    _RateLimiterService_GetBurstSizeAndRate_Handler,
		},
		{
			MethodName: "GetBurstSize",
			Handler:    _RateLimiterService_GetBurstSize_Handler,
		},
		{
			MethodName: "SetBurstSize",
			Handler:    _RateLimiterService_SetBurstSize_Handler,
		},
		{
			MethodName: "GetRate",
			Handler:    _RateLimiterService_GetRate_Handler,
		},
		{
			MethodName: "SetRate",
			Handler:    _RateLimiterService_SetRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/colibri/v1/ratelimiter.proto",
}
